<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec PUBLIC "-//W3C//DTD Specification V2.2//EN"
       "xmlspec.dtd" [
<!--for doing work locally without a network connection -->
]>

<spec w3c-doctype="ds">
  <header>
    <title>Drosera Font Format (DroFonts)</title>
    <version>0.x</version>
    <w3c-designation>DS-drofont</w3c-designation>
    <w3c-doctype>Drosera Specification</w3c-doctype>
    <pubdate>
      <day>20</day>
      <month>Dec</month>
      <year>2009</year></pubdate>
    <publoc>
    </publoc>
    <prevlocs>
    </prevlocs>
    <latestloc>
    </latestloc>
    <authlist>
      <author>
	<name>Andrew Robbins</name>
	<email>and_j_rob@yahoo.com</email>
      </author>
    </authlist>
    <abstract>
      <p>
	bla
      </p>
    </abstract>
    <status id="Status">
      <p>
	Status.
      </p>
    </status>
    <langusage>
      <language id="en-US">English</language>
    </langusage>
    <revisiondesc>
      <p>Last Modified: $Date: 2008/09/16 11:51:04 $</p>
  </revisiondesc>
  </header>
  <body>
    <div1 id="introduction">
      <head>Introduction</head>
      <p>
	Intro.
      </p>
    </div1>
    <div1 id="documents">
      <head>Conformance</head>
      <p>
      </p>
      <div2>
	<head>Documents</head>
      </div2>
      <div2>
	<head>Processors</head>
      </div2>
    </div1>
    <div1>
      <head>Converting TrueType (TTF) programs</head>
      <table border="1">
	<thead>
	  <th>TTF bytes</th>
	  <th>TTF instruction</th>
	  <th>CIL instruction</th>
	  <th>SVG</th>
	  <th>comment</th>
	</thead>
	<tbody>
	  <tr>
	    <td>0x00</td>
	    <td>SVTCA[0]</td>
	    <td>call void TTF::svtcay()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x01</td>
	    <td>SVTCA[1]</td>
	    <td>call void TTF::svtcax()</td>
	    <td></td>
	    <td></td> 
	  </tr>
---
	  <tr>
	    <td>0x10</td>
	    <td>SRP0</td>
	    <td>call void TTF::srp0(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x11</td>
	    <td>SRP1</td>
	    <td>call void TTF::srp1(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x12</td>
	    <td>SRP0</td>
	    <td>call void TTF::srp2(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x13</td>
	    <td>SZP0</td>
	    <td>call void TTF::szp0(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x14</td>
	    <td>SZP1</td>
	    <td>call void TTF::szp1(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x15</td>
	    <td>SZP2</td>
	    <td>call void TTF::szp2(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x16</td>
	    <td>SZPS</td>
	    <td>call void TTF::szps(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x17</td>
	    <td>SLOOP</td>
	    <td>call void TTF::sloop(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x18</td>
	    <td>RTG</td>
	    <td>call void TTF::rtg()</td>
	    <td></td>
	    <td>round to grid</td> 
	  </tr>
	  <tr>
	    <td>0x19</td>
	    <td>RTHG</td>
	    <td>call void TTF::rthg()</td>
	    <td></td>
	    <td>round to half grid</td>
	  </tr>
	  <tr>
	    <td>0x1A</td>
	    <td>SMD</td>
	    <td>call void TTF::smd()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x1B</td>
	    <td>ELSE</td>
	    <td>call void TTF::else_()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1C</td>
	    <td>JMPR</td>
	    <td>call void TTF::jmpr()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1D</td>
	    <td>SCVTCI</td>
	    <td>call void TTF::scvtci()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1E</td>
	    <td>SSWCI</td>
	    <td>call void TTF::sswci()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1F</td>
	    <td>SSW</td>
	    <td>call void TTF::ssw()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x20</td>
	    <td>DUP</td>
	    <td>call object TTF::dup()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x21</td>
	    <td>POP</td>
	    <td>call void TTF::pop(object)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x22</td>
	    <td>CLEAR</td>
	    <td>call void TTF::clear()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x23</td>
	    <td>SWAP</td>
	    <td>call void TTF::swap()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x24</td>
	    <td>DEPTH</td>
	    <td>call void TTF::depth()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x25</td>
	    <td>CINDEX</td>
	    <td>call void TTF::cindex()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x26</td>
	    <td>MINDEX</td>
	    <td>call void TTF::mindex()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x27</td>
	    <td>ALIGNPTS</td>
	    <td>call void TTF::alignpts(int, int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x29</td>
	    <td>UTP</td>
	    <td>call void TTF::utp()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x2A</td>
	    <td>LOOPCALL</td>
	    <td>call void TTF::loopcall()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x2B</td>
	    <td>CALL</td>
	    <td>call</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x2C</td>
	    <td>FDEF</td>
	    <td>function () {...}?</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x2D</td>
	    <td>ENDF</td>
	    <td>}?</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x38</td>
	    <td>SHPIX</td>
	    <td>call void TTF::shpix()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x39</td>
	    <td>IP</td>
	    <td>call void TTF::ip()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x3C</td>
	    <td>ALIGNRP</td>
	    <td>call void TTF::alignrp(int, int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x3D</td>
	    <td>RTDG</td>
	    <td>call void TTF::rtdg()</td>
	    <td></td>
	    <td>round to double grid</td>
	  </tr>
	  <tr>
	    <td>0x42</td>
	    <td>WS</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x43</td>
	    <td>RS</td>
	    <td></td>
	    <td></td>
	    <td>read store</td> 
	  </tr>
	  <tr>
	    <td>0x44</td>
	    <td>WCVTP</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x45</td>
	    <td>RCVT</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x46</td>
	    <td>GC[?]</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x47</td>
	    <td>GC[?]</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x48</td>
	    <td>SCFS</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x49</td>
	    <td>MD[?]</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4A</td>
	    <td>MD[?]</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4B</td>
	    <td>MPPEM</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4C</td>
	    <td>MPS</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4D</td>
	    <td>FLIPON</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4E</td>
	    <td>FLIPOFF</td>
	    <td></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x4F</td>
	    <td>DEBUG</td>
	    <td><em>unused</em></td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x56</td>
	    <td>ODD</td>
	    <td>call bool Math::Odd(TTF::Fixed)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x57</td>
	    <td>EVEN</td>
	    <td>call bool Math::Even(TTF::Fixed)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x5A</td>
	    <td>AND</td>
	    <td>and</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x5B</td>
	    <td>OR</td>
	    <td>or</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x60</td>
	    <td>ADD</td>
	    <td>add</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x64</td>
	    <td>ABS</td>
	    <td>call float Math::Abs(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x65</td>
	    <td>CINDEX</td>
	    <td>call void TTF::cindex(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x67</td>
	    <td>CEILING</td>
	    <td>call float Math::Ceiling(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x73</td>
	    <td>DELTAC1</td>
	    <td>call void TTF::deltac1(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x74</td>
	    <td>DELTAC2</td>
	    <td>call void TTF::deltac2(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x75</td>
	    <td>DELTAC3</td>
	    <td>call void TTF::deltac3(float)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x7C</td>
	    <td>RUTG</td>
	    <td>call void TTF::deltac3(float)</td>
	    <td></td>
	    <td>round up to grid</td> 
	  </tr>
	  <tr>
	    <td>0x7F</td>
	    <td>AA</td>
	    <td>call void TTF::pop(int)</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0x8A</td>
	    <td>ROLL</td>
	    <td>call void TTF::roll()</td>
	    <td></td>
	    <td></td> 
	  </tr>
	  <tr>
	    <td>0xB0-0xB7</td>
	    <td>PUSHB[###]</td>
	    <td>ld.*</td>
	    <td></td>
	    <td>push bytes</td>
	  </tr>
	  <tr>
	    <td>0xB8-0xBF</td>
	    <td>PUSHW[###]</td>
	    <td>ld.*</td>
	    <td></td>
	    <td>push words</td>
	  </tr>
	</tbody>
      </table>
    </div1>
    <div1>
      <head>Converting OpenType (CFF) programs</head>
      <table border="1">
	<thead>
	  <th>CFF bytes</th>
	  <th>CFF instruction</th>
	  <th>CIL instruction</th>
	  <th>SVG</th>
	  <th>comment</th>
	</thead>
	<tbody>
	  <tr>
	    <td>0x00</td>
	    <td><em>reserved</em></td>
	    <td></td>
	    <td></td>
	    <td>all other reserved codes are omitted</td> 
	  </tr>
	  <tr>
	    <td>0x01</td>
	    <td>hstem</td>
	    <td>call void CFF::vstem(int, int)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x03</td>
	    <td>vstem</td>
	    <td>call void CFF::hstem(int, int)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x04</td>
	    <td>vmoveto</td>
	    <td>call void CFF::vmoveto(...)</td>
	    <td>M</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x05</td>
	    <td>rlineto</td>
	    <td>call void CFF::rlineto(...)</td>
	    <td>l</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x06</td>
	    <td>hlineto</td>
	    <td>call void CFF::hlineto(...)</td>
	    <td>H</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x07</td>
	    <td>vlineto</td>
	    <td>call void CFF::vlineto(...)</td>
	    <td>V</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x08</td>
	    <td>rrcurveto</td>
	    <td>call void CFF::rrcurveto(...)</td>
	    <td>?</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0A</td>
	    <td>callsubr</td>
	    <td>call</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0B</td>
	    <td>return</td>
	    <td>ret</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C</td>
	    <td><em>escape</em></td>
	    <td></td>
	    <td></td>
	    <td>there is no single CIL instruction for this</td>
	  </tr>
	  <tr>
	    <td>0x0C03</td>
	    <td>and</td>
	    <td>and</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C04</td>
	    <td>or</td>
	    <td>or</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C05</td>
	    <td>not</td>
	    <td>not</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C09</td>
	    <td>abs</td>
	    <td>call float Math::Abs(float)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C0A</td>
	    <td>add</td>
	    <td>add</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C0B</td>
	    <td>sub</td>
	    <td>sub</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C0C</td>
	    <td>div</td>
	    <td>div</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C0E</td>
	    <td>neg</td>
	    <td>neg</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C0F</td>
	    <td>eq</td>
	    <td>ceq</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C12</td>
	    <td>drop</td>
	    <td>call void CFF::drop(object)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C14</td>
	    <td>put</td>
	    <td>call void CFF::put()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C15</td>
	    <td>get</td>
	    <td>call void CFF::get()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C16</td>
	    <td>ifelse</td>
	    <td>call void CFF::ifelse()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C17</td>
	    <td>random</td>
	    <td>call int Random::Next()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C18</td>
	    <td>mul</td>
	    <td>mul</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C1A</td>
	    <td>sqrt</td>
	    <td>call float Math::Sqrt(float)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C1B</td>
	    <td>dup</td>
	    <td>call void CFF::dup()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C1C</td>
	    <td>exch</td>
	    <td>call void CFF::exch()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C1D</td>
	    <td>index</td>
	    <td>call void CFF::index()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C1E</td>
	    <td>roll</td>
	    <td>call void CFF::roll()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C22</td>
	    <td>hflex</td>
	    <td>call void CFF::hflex(...)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C23</td>
	    <td>flex</td>
	    <td>call void CFF::flex(...)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C24</td>
	    <td>hflex1</td>
	    <td>call void CFF::hflex1(...)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0C25</td>
	    <td>flex1</td>
	    <td>call void CFF::flex1(...)</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x0E</td>
	    <td>endchar</td>
	    <td>call void CFF::endchar()</td>
	    <td></td>
	    <td>not used by converter</td>
	  </tr>
	  <tr>
	    <td>0x12</td>
	    <td>hstemhm</td>
	    <td>call void CFF::hstemhm()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x13</td>
	    <td>hintmask</td>
	    <td>call void CFF::hintmask()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x14</td>
	    <td>cntrmask</td>
	    <td>call void CFF::cntrmask()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x15</td>
	    <td>rmoveto</td>
	    <td>call void CFF::rmoveto()</td>
	    <td>m</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x16</td>
	    <td>hmoveto</td>
	    <td>call void CFF::hmoveto()</td>
	    <td>M</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x17</td>
	    <td>vstemhm</td>
	    <td>call void CFF::vstemhm()</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x18</td>
	    <td>rcurveline</td>
	    <td>call void CFF::rcurveline()</td>
	    <td>cl</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x19</td>
	    <td>rlinecurve</td>
	    <td>call void CFF::rlinecurve()</td>
	    <td>lc</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1A</td>
	    <td>vvcurveto</td>
	    <td>call void CFF::vvcurveto()</td>
	    <td>?</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1B</td>
	    <td>hhcurveto</td>
	    <td>call void CFF::hhcurveto()</td>
	    <td>?</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1D</td>
	    <td>callgsubr</td>
	    <td>call</td>
	    <td></td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1E</td>
	    <td>vhcurveto</td>
	    <td>call void CFF::vhcurveto()</td>
	    <td>?</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td>0x1F</td>
	    <td>hvcurveto</td>
	    <td>call void CFF::hvcurveto()</td>
	    <td>?</td>
	    <td></td>
	  </tr>
	</tbody>
      </table>
    </div1>
  </body>
  <back>
    <div1 id="abstract-syntax">
      <head>Abstract Syntax</head>
    </div1>
  </back>
</spec>
